// Code generated by ent, DO NOT EDIT.

package video

import (
	"entgo.io/ent/dialect/sql"
	"freefrom.space/videoTransform/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldID, id))
}

// OriginURL applies equality check predicate on the "origin_url" field. It's identical to OriginURLEQ.
func OriginURL(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldOriginURL, v))
}

// ConvertURL applies equality check predicate on the "convert_url" field. It's identical to ConvertURLEQ.
func ConvertURL(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldConvertURL, v))
}

// OriginURLEQ applies the EQ predicate on the "origin_url" field.
func OriginURLEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldOriginURL, v))
}

// OriginURLNEQ applies the NEQ predicate on the "origin_url" field.
func OriginURLNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldOriginURL, v))
}

// OriginURLIn applies the In predicate on the "origin_url" field.
func OriginURLIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldOriginURL, vs...))
}

// OriginURLNotIn applies the NotIn predicate on the "origin_url" field.
func OriginURLNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldOriginURL, vs...))
}

// OriginURLGT applies the GT predicate on the "origin_url" field.
func OriginURLGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldOriginURL, v))
}

// OriginURLGTE applies the GTE predicate on the "origin_url" field.
func OriginURLGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldOriginURL, v))
}

// OriginURLLT applies the LT predicate on the "origin_url" field.
func OriginURLLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldOriginURL, v))
}

// OriginURLLTE applies the LTE predicate on the "origin_url" field.
func OriginURLLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldOriginURL, v))
}

// OriginURLContains applies the Contains predicate on the "origin_url" field.
func OriginURLContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldOriginURL, v))
}

// OriginURLHasPrefix applies the HasPrefix predicate on the "origin_url" field.
func OriginURLHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldOriginURL, v))
}

// OriginURLHasSuffix applies the HasSuffix predicate on the "origin_url" field.
func OriginURLHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldOriginURL, v))
}

// OriginURLEqualFold applies the EqualFold predicate on the "origin_url" field.
func OriginURLEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldOriginURL, v))
}

// OriginURLContainsFold applies the ContainsFold predicate on the "origin_url" field.
func OriginURLContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldOriginURL, v))
}

// ConvertURLEQ applies the EQ predicate on the "convert_url" field.
func ConvertURLEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldEQ(FieldConvertURL, v))
}

// ConvertURLNEQ applies the NEQ predicate on the "convert_url" field.
func ConvertURLNEQ(v string) predicate.Video {
	return predicate.Video(sql.FieldNEQ(FieldConvertURL, v))
}

// ConvertURLIn applies the In predicate on the "convert_url" field.
func ConvertURLIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldIn(FieldConvertURL, vs...))
}

// ConvertURLNotIn applies the NotIn predicate on the "convert_url" field.
func ConvertURLNotIn(vs ...string) predicate.Video {
	return predicate.Video(sql.FieldNotIn(FieldConvertURL, vs...))
}

// ConvertURLGT applies the GT predicate on the "convert_url" field.
func ConvertURLGT(v string) predicate.Video {
	return predicate.Video(sql.FieldGT(FieldConvertURL, v))
}

// ConvertURLGTE applies the GTE predicate on the "convert_url" field.
func ConvertURLGTE(v string) predicate.Video {
	return predicate.Video(sql.FieldGTE(FieldConvertURL, v))
}

// ConvertURLLT applies the LT predicate on the "convert_url" field.
func ConvertURLLT(v string) predicate.Video {
	return predicate.Video(sql.FieldLT(FieldConvertURL, v))
}

// ConvertURLLTE applies the LTE predicate on the "convert_url" field.
func ConvertURLLTE(v string) predicate.Video {
	return predicate.Video(sql.FieldLTE(FieldConvertURL, v))
}

// ConvertURLContains applies the Contains predicate on the "convert_url" field.
func ConvertURLContains(v string) predicate.Video {
	return predicate.Video(sql.FieldContains(FieldConvertURL, v))
}

// ConvertURLHasPrefix applies the HasPrefix predicate on the "convert_url" field.
func ConvertURLHasPrefix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasPrefix(FieldConvertURL, v))
}

// ConvertURLHasSuffix applies the HasSuffix predicate on the "convert_url" field.
func ConvertURLHasSuffix(v string) predicate.Video {
	return predicate.Video(sql.FieldHasSuffix(FieldConvertURL, v))
}

// ConvertURLIsNil applies the IsNil predicate on the "convert_url" field.
func ConvertURLIsNil() predicate.Video {
	return predicate.Video(sql.FieldIsNull(FieldConvertURL))
}

// ConvertURLNotNil applies the NotNil predicate on the "convert_url" field.
func ConvertURLNotNil() predicate.Video {
	return predicate.Video(sql.FieldNotNull(FieldConvertURL))
}

// ConvertURLEqualFold applies the EqualFold predicate on the "convert_url" field.
func ConvertURLEqualFold(v string) predicate.Video {
	return predicate.Video(sql.FieldEqualFold(FieldConvertURL, v))
}

// ConvertURLContainsFold applies the ContainsFold predicate on the "convert_url" field.
func ConvertURLContainsFold(v string) predicate.Video {
	return predicate.Video(sql.FieldContainsFold(FieldConvertURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Video) predicate.Video {
	return predicate.Video(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Video) predicate.Video {
	return predicate.Video(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Video) predicate.Video {
	return predicate.Video(sql.NotPredicates(p))
}
